# -*- coding: utf-8 -*-
"""Genetic Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16aBDIcXPUIDXsDBw2pQTfIFrNqpcUXQK
"""

POPULATION_SIZE = 15
T_S_size = 3
MUTATIONRATE = 0.01
NO_OF_ELITE = 1
from audioop import reverse
import random as rnd

class Data:
    Hostels = [["H1", "Male"], ["H2", "Female"]]
    Rooms = [["H1_001", "H1", "Hi", 3, 0], ["H1_002", "H1", "Hi", 3, 0], ["H1_003", "H1", "Hi", 3, 0], ["H1_004", "H1", "Hi", 3, 0], ["H1_005", "H1", "Hi", 3, 0], ["H1_101", "H1", "Fe", 3, 0], ["H1_102", "H1", "Fe", 3, 0], ["H1_103", "H1", "Fe", 3, 0], ["H1_104", "H1", "Fe", 3, 0], ["H1_105", "H1", "Fe", 3, 0], ["H1_201", "H1", "Se", 3, 0], ["H1_202", "H1", "Se", 3, 0], ["H1_203", "H1", "Se", 3, 0], ["H1_204", "H1", "Se", 3, 0], ["H1_205", "H1", "Se", 3, 0], ["H1_301", "H1", "Te", 3, 0], ["H1_302", "H1", "Te", 3, 0], ["H1_303", "H1", "Te", 3, 0], ["H1_304", "H1", "Te", 3, 0], ["H1_305", "H1", "Te", 3, 0], ["H1_401", "H1", "Be", 3, 0], ["H1_402", "H1", "Be", 3, 0], ["H1_403", "H1", "Be", 3, 0], ["H1_404", "H1", "Be", 3, 0], ["H1_405", "H1", "Be", 3, 0], ["H2_001", "H2", "Hi", 3, 0], ["H2_002", "H2", "Hi", 3, 0], ["H2_003", "H2", "Hi", 3, 0], ["H2_004", "H2", "Hi", 3, 0], ["H2_005", "H2", "Hi", 3, 0], ["H2_101", "H2", "Fe", 3, 0], ["H2_102", "H2", "Fe", 3, 0], ["H2_103", "H2", "Fe", 3, 0], ["H2_104", "H2", "Fe", 3, 0], ["H2_105", "H2", "Fe", 3, 0], ["H2_201", "H2", "Se", 3, 0], ["H2_202", "H2", "Se", 3, 0], ["H2_203", "H2", "Se", 3, 0], ["H2_204", "H2", "Se", 3, 0], ["H2_205", "H2", "Se", 3, 0], ["H2_301", "H2", "Te", 3, 0], ["H2_302", "H2", "Te", 3, 0], ["H2_303", "H2", "Te", 3, 0], ["H2_304", "H2", "Te", 3, 0], ["H2_305", "H1", "Te", 3, 0], ["H2_401", "H1", "Be", 3, 0], ["H2_402", "H1", "Be", 3, 0], ["H2_403", "H2", "Be", 3, 0], ["H2_404", "H2", "Be", 3, 0], ["H2_405", "H2", "Be", 3, 0]]
    
    
    Students = [["sdt001", "Male", "Hi", 0], ["sdt002", "Female", "Fe", 0], ["sdt003", "Male", "Hi", 0], ["sdt004", "Male", "Hi", 0], ["sdt005", "Female", "Fe", 0], ["sdt006", "Female", "Fe", 0], ["sdt007", "Male", "Fe", 0], ["sdt008", "Female", "Se", 0], ["sdt009", "Female", "Hi", 0], ["sdt010", "Male", "Se", 0], ["sdt011", "Male", "Fe", 0], ["sdt012", "Female", "Se", 0], ["sdt013", "Female", "Hi", 0], ["sdt014", "Male", "Fe", 0], ["sdt015", "Female", "Hi", 0], ["sdt016", "Female", "Te", 0], ["sdt017", "Male", "Se", 0], ["sdt018", "Male", "Te", 0], ["sdt019", "Male", "Te", 0], ["sdt020", "Male", "Se", 0], ["sdt021", "Male", "Se", 0], ["sdt022", "Female", "Be", 0], ["sdt023", "Male", "Be", 0], ["sdt024", "Male", "Te", 0], ["sdt025", "Female", "Be", 0], ["sdt026", "Male", "Be", 0], ["sdt027", "Male", "Te", 0], ["sdt028", "Female", "Be", 0], ["sdt029", "Female", "Te", 0], ["sdt030", "Male", "Te", 0], ["sdt031", "Female", "Te", 0], ["sdt032", "Female", "Se", 0], ["sdt033", "Female", "Se", 0], ["sdt034", "Female", "Fe", 0], ["sdt035", "Male", "Te", 0], ["sdt036", "Female", "Fe", 0], ["sdt037", "Female", "Hi", 0], ["sdt038", "Female", "Hi", 0], ["sdt039", "Male", "Fe", 0], ["sdt040", "Male", "Be", 0], ["sdt041", "Male", "Te", 0], ["sdt042", "Male", "Be", 0], ["sdt043", "Female", "Se", 0], ["sdt044", "Female", "Se", 0], ["sdt045", "Female", "Be", 0], ["sdt046", "Female", "Te", 0], ["sdt047", "Female", "Hi", 0], ["sdt048", "Male", "Be", 0], ["sdt049", "Male", "Be", 0], ["sdt050", "Male", "Hi", 0], ["sdt051", "Male", "Hi", 0], ["sdt052", "Female", "Fe", 0], ["sdt053", "Male", "Hi", 0], ["sdt054", "Male", "Hi", 0], ["sdt055", "Female", "Fe", 0], ["sdt056", "Female", "Fe", 0], ["sdt057", "Male", "Fe", 0], ["sdt058", "Male", "Se", 0], ["sdt059", "Female", "Hi", 0], ["sdt060", "Female", "Se", 0], ["sdt061", "Male", "Fe", 0], ["sdt062", "Female", "Se", 0], ["sdt063", "Female", "Hi", 0], ["sdt064", "Male", "Fe", 0], ["sdt065", "Female", "Hi", 0], ["sdt066", "Female", "Te", 0], ["sdt067", "Male", "Se", 0], ["sdt068", "Female", "Te", 0], ["sdt069", "Female", "Te", 0], ["sdt070", "Male", "Se", 0], ["sdt071", "Male", "Se", 0], ["sdt072", "Female", "Be", 0], ["sdt073", "Female", "Be", 0], ["sdt074", "Male", "Te", 0], ["sdt075", "Female", "Be", 0], ["sdt076", "Female", "Be", 0], ["sdt077", "Male", "Te", 0], ["sdt078", "Female", "Be", 0], ["sdt079", "Male", "Se", 0], ["sdt080", "Male", "Te", 0], ["sdt081", "Female", "Te", 0], ["sdt082", "Female", "Se", 0], ["sdt083", "Female", "Se", 0], ["sdt084", "Female", "Fe", 0], ["sdt085", "Male", "Te", 0], ["sdt086", "Female", "Fe", 0], ["sdt087", "Female", "Hi", 0], ["sdt088", "Female", "Hi", 0], ["sdt089", "Male", "Se", 0], ["sdt090", "Male", "Be", 0], ["sdt091", "Female", "Te", 0], ["sdt092", "Male", "Be", 0], ["sdt093", "Male", "Fe", 0], ["sdt094", "Female", "Se", 0], ["sdt095", "Male", "Se", 0], ["sdt096", "Male", "Fe", 0], ["sdt097", "Female", "Hi", 0], ["sdt098", "Male", "Be", 0], ["sdt099", "Male", "Be", 0], ["sdt100", "Male", "Hi", 0]]

    def __init__(self):
        self._hostels = []; self._rooms = []; self._students = []
        for i in range(0 , len(self.Hostels)):
            self._hostels.append(Hostel(self.Hostels[i][0], self.Hostels[i][1]))
            
        for i in range(0 , len(self.Rooms)):
            self._rooms.append(Room(self.Rooms[i][0], self.Rooms[i][1], self.Rooms[i][2], self.Rooms[i][3], self.Rooms[i][4]))
            
        for i in range(0, len(self.Students)):
            self._students.append(Student(self.Students[i][0], self.Students[i][1], self.Students[i][2], self.Students[i][3]))

        self._A_Rom = 0
        for i in range(0, len(self._students)):
            self._A_Rom = i + 1

    def get_hostels(self): return self._hostels
    def get_rooms(self): return self._rooms
    def get_students(self): return self._students
    def get_A_Rom(self): return self._A_Rom

class Allocate:
    def __init__(self):
        self._data = data
        self._allocate = []
        self.allot = []
        self._numberofConflict = 0
        self._fitness = -1
        self._ARom = 0 
        self._isFitnessChanged = True       
    
    def get_rooms(self):
      self.allot = []
      for i in range(0, len(self._allocate)):
        self.allot.append(self._allocate[i].get_room())
      return self.allot
    
    def get_students(self):
      self.allot = []
      for i in range(0, len(self._allocate)):
        self.allot.append(self._allocate[i].get_student())
      return self.allot

    def get_allocate(self):
        self._isFitnessChanged = True
        return self._allocate

    def get_numberofConflict(self): return self._numberofConflict

    def get_fitness(self):
        if (self._isFitnessChanged == True):
            self._fitness = self.calculate_fitness()
            self._isFitnessChanged = False
        return self._fitness

    def initialize(self):
        rooms = self._data.get_rooms()
        for i in range(0, len(rooms)):
            students = self._data.get_students()
            for j in range(0, len(students)):
                ran_R = rnd.randrange(0, len(rooms))
                while(rooms[ran_R].get_Rset() < rooms[ran_R].get_Capacity()):
                    ran_S = rnd.randrange(0, len(students))
                    if (students[ran_S].get_S_avail() == 0):
                        if (rooms[ran_R].get_Hid() == "H1" and students[ran_S].get_Gen() == "Male"):
                            if (rooms[ran_R].get_Cat() == students[ran_S].get_Cat()):
                                self._ARom += 1
                                allot = Allocation(self._ARom, rooms[ran_R], students[ran_S])
                                allot.set_room(rooms[ran_R].get_Rid())
                                allot.set_Acap(rooms[ran_R].get_Rset())
                                rooms[ran_R].set_Rset(rooms[ran_R].get_Rset() + 1)
                                allot.set_student(students[ran_S].get_Sid())
                                students[ran_S].set_S_avail(1)
                                self._allocate.append(allot)
                            else:
                                break
                            
                        elif (rooms[ran_R].get_Hid() == "H2" and students[ran_S].get_Gen() == "Female"):
                            if (rooms[ran_R].get_Cat() == students[ran_S].get_Cat()):
                                self._ARom += 1
                                allot = Allocation(self._ARom, rooms[ran_R], students[ran_S])
                                allot.set_room(rooms[ran_R].get_Rid())
                                allot.set_Acap(rooms[ran_R].get_Rset())
                                rooms[ran_R].set_Rset(rooms[ran_R].get_Rset() + 1)
                                allot.set_student(students[ran_S].get_Sid())
                                students[ran_S].set_S_avail(1)
                                self._allocate.append(allot)
                            else:
                                break
                            
                        else:
                            break
                    else:
                        break
    
        
        while(len(self._allocate) != len(students)):
            rooms = self._data.get_rooms()
            for i in range(0, len(rooms)):
                students = self._data.get_students()
                for j in range(0, len(students)):
                    allot = Allocation(self._ARom, rooms[i], students[j])
                    while(rooms[i].get_Rset() < rooms[i].get_Capacity()):
                        if (students[j].get_S_avail() == 0):
                            if (rooms[i].get_Hid() == "H1" and students[j].get_Gen() == "Male"):
                                if (rooms[i].get_Cat() == students[j].get_Cat()):
                                    
                                    self._ARom += 1
                                    allot.set_room(rooms[i].get_Rid())
                                    allot.set_Acap(rooms[i].get_Rset())
                                    rooms[i].set_Rset(rooms[i].get_Rset() + 1)
                                    allot.set_student(students[j].get_Sid())
                                    students[j].set_S_avail(1)
                                    self._allocate.append(allot)
                                else:
                                    break
                            elif (rooms[i].get_Hid() == "H2" and students[j].get_Gen() == "Female"):
                                if (rooms[i].get_Cat() == students[j].get_Cat()):
                                    
                                    self._ARom += 1
                                    allot.set_room(rooms[i].get_Rid())
                                    allot.set_Acap(rooms[i].get_Rset())
                                    rooms[i].set_Rset(rooms[i].get_Rset() + 1)
                                    allot.set_student(students[j].get_Sid())
                                    students[j].set_S_avail(1)
                                    self._allocate.append(allot)
                                else:
                                    break
                            else:
                                break
                        else:
                            break
        for i in range(0, len(rooms)):   
            rooms[i].set_Rsetend()
        for j in range(0, len(students)):
            students[j].set_S_availend()
        return self

    def calculate_fitness(self):
        f = 0
        for i in range(0, len(self._allocate)):
            u = self._allocate[i].get_Acap()/self._allocate[i].get_R().get_Capacity()

            if (self._allocate[i].get_R().get_Cat() == "Hi"):
                w = 0.35
                a = u*w
                f += a
            if (self._allocate[i].get_R().get_Cat() == "Fe"):
                w = 0.15
                a = u*w
                f += a

            if (self._allocate[i].get_R().get_Cat() == "Se"):
                w = 0.15
                a = u*w
                f += a
    
            if (self._allocate[i].get_R().get_Cat() == "Te"):
                w = 0.15
                a = u*w
                f += a
                
            if (self._allocate[i].get_R().get_Cat() == "Be"):
                w = 0.2
                a = u*w
                f += a 
        fitness = f      
        return fitness

class Population:
    def __init__(self, size):
        self._size = size 
        self._data = data
        self._allocations = []
        for i in range(0, size):
            allocate = Allocate().initialize()
            self._allocations.append(allocate)
    def get_allocations(self): return self._allocations
    def get_size(self): return self._size

class GeneticAlgorithm:
    def evovle(self, population): return self._mutate_populatetion(self._crossover_population(population))

    def _crossover_population(self,pop):
        cross_pop = Population(0)
        for i in range(0, NO_OF_ELITE):
            cross_pop.get_allocations().append(pop.get_allocations()[i])
        i = NO_OF_ELITE
        while i < POPULATION_SIZE:
            Allot1 = self._selection_tournament_population(pop).get_allocations()[0]
            Allot2 = self._selection_tournament_population(pop).get_allocations()[0]
            cross_pop.get_allocations().append(self._crossover_allot(Allot1,Allot2))
            i += 1
        return cross_pop

    def _mutate_populatetion(self,pop):
        for i in range(NO_OF_ELITE, POPULATION_SIZE):
            self._mutate_allot(pop.get_allocations()[i])
        return pop

    def _crossover_allot(self, allot1, allot2):
        crossAllot = Allocate().initialize()
        for i in range(0 ,len(crossAllot.get_allocate())):
            if (rnd.random() > 0.5): crossAllot.get_allocate()[i] = allot1.get_allocate()[i]
            else: crossAllot.get_allocate()[i] = allot2.get_allocate()[i]
        return crossAllot

    def _mutate_allot(self, mutateAllot):
        allot = Allocate().initialize()
        for i in range(0 , len(mutateAllot.get_allocate())):
            if(MUTATIONRATE > rnd.random()): mutateAllot.get_allocate()[i] = allot.get_allocate()[i]
        return mutateAllot

    def _selection_tournament_population(self, pop):
        tour_pop = Population(0)
        i = 0
        while i < T_S_size:
            tour_pop.get_allocations().append(pop.get_allocations()[rnd.randrange(0 ,POPULATION_SIZE)])
            i += 1
        tour_pop.get_allocations().sort(key=lambda x: x.get_fitness(), reverse=True)
        return tour_pop

class Allocation:
    def __init__(self, Aid, R, S):
        self._Aid = Aid
        self._R = R
        self._S = S
        self._room = None
        self._student = None
        self._Acap = None
    def get_Aid(self): return self._Aid
    def get_R(self): return self._R
    def get_S(self): return self._S
    def get_room(self): return self._room
    def get_student(self): return self._student
    def get_Acap(self): return self._Acap
    def set_room(self, room): self._room = room
    def set_student(self, student): self._student = student
    def set_Acap(self, Acap):
        Acap += 1
        self._Acap = Acap

class Hostel:
    def __init__(self, Hid, Dorm):
        self._Hid = Hid
        self._Dorm = Dorm
    def get_Hid(self): return self._Hid
    def get_Dorm(self): return self._Dorm

class Room:
    def __init__(self, Rid, Hid, Cat, Capacity, Std_Allocated):
        self._Rid = Rid
        self._Hid = Hid
        self._Cat = Cat
        self._Capacity = Capacity
        self._Std_Allocated = Std_Allocated
        self._allot = 0

    def get_Rid(self): return self._Rid
    def get_Hid(self): return self._Hid
    def get_Cat(self): return self._Cat
    def get_Capacity(self): return self._Capacity
    def get_Std_Allocated(self): return self._Std_Allocated
    def get_Rset(self): return self._allot
    def set_Rset(self, Rset): self._allot = Rset
    def set_Rsetend(self) : self._allot = 0

class Student:
    def __init__(self, Sid, Gen, Cat, std_allocated):
        self._Sid = Sid
        self._Gen = Gen
        self._Cat = Cat
        self._std_allocated = std_allocated
        self.S_avail = 0
        
    def get_Sid(self): return self._Sid
    def get_Gen(self): return self._Gen
    def get_Cat(self): return self._Cat
    def get_std_allocated(self): return self._std_allocated
    def get_S_avail(self): return self.S_avail
    def set_S_avail(self, avail): self.S_avail = avail
    def set_S_availend(self): self.S_avail = 0

class DisplayMsg:
    
    def print_fitness(self, population):
        allocations = population.get_allocations()
        for i in range(0, len(allocations)):
            print(allocations[i].get_fitness())
    def print_allocation(self, population):
        A = []
        B = []
        allocations = population.get_allocations()
        for i in range(0, len(allocations)):
            A.append(allocations[i].get_rooms())
            B.append(allocations[i].get_students())
        for i in range(0, len(allocations[i].get_students())):
          print(A[0][i], B[0][i])

data = Data()
GA_Number = 0
display = DisplayMsg()
print("\n> Generation #"+str(GA_Number))
population = Population(POPULATION_SIZE)
population.get_allocations().sort(key=lambda x: x.get_fitness(), reverse=True)
display.print_fitness(population)
geneticAlgorithm = GeneticAlgorithm()
while (GA_Number < 100):
    GA_Number += 1
    print("\n> Generation #"+str(GA_Number))
    population = geneticAlgorithm.evovle(population)
    population.get_allocations().sort(key=lambda x: x.get_fitness(), reverse=True)
    display.print_fitness(population)
print("\n")
print("------------------------------------------------------------------------")
print("Students Allocated")
print("------------------------------------------------------------------------")
display.print_allocation(population)

